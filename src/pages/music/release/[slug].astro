---
import type { MusicProject } from "../../../env";
import music from "../../../data/music.json";
import Default from "../../../layouts/Default.astro";
import Button from "../../../components/Button.astro";

export async function getStaticPaths() {
	let paths = [];

	for (const project of music) {
		paths.push({ params: { slug: project.slug } });
	}

	return paths;
}

const releaseSlug: string = Astro.params.slug;
const release: MusicProject = music.find((project) => project.slug === releaseSlug) as MusicProject;

if (!release.slug) {
	Astro.response.status = 404;
	Astro.response.statusText = "Release not found";
}

function formatDate(input: string) {
	const date: Date = new Date(input);
	const format = new Intl.DateTimeFormat("en-GB", {
		dateStyle: "long",
	});
	return format.format(date);
}
---

<Default title={`${release.title} - music`}>
	<div class="flex flex-col gap-8 py-16 text-sm">
		<div class="flex flex-row items-center gap-6">
			<img
				draggable="false"
				style={{ borderColor: `color-mix(in oklab, ${release.colour}, transparent 80%)` }}
				class="hidden h-48 w-48 rounded-md border-[1px] shadow-2xl md:block"
				src={release.icon}
			/>
			<div class="flex flex-col gap-4">
				<span class="italic text-brand-text-secondary">{formatDate(release.date)}</span>
				<span class="text-6xl font-bold">{release.title}</span>
				<span>
					{release.description[0]}
				</span>
				<div class="flex flex-row flex-wrap items-center gap-2">
					{
						release.links.map((link: any) => (
							<Button
								classList={`bg-opacity-50 bg-brand-background-secondary border-b-[1px] border-[${release.colour}]`}
								style={{ borderColor: `color-mix(in oklab, ${release.colour}, transparent 80%)` }}
								to={link.to}
								external={true}
								showIcon={true}>
								{link.name}
							</Button>
						))
					}
				</div>
			</div>
		</div>
		{release.description.slice(1).length > 0 && <span class="border-b" />}
		<div class="md text-md flex max-w-2xl flex-col items-start gap-4">
			{release.description.slice(1).map((line: string) => <span>{line}</span>)}
		</div>
	</div>

	<img
		src={release.icon}
		class="bgimg absolute left-0 top-0 z-[-2] h-[75%] w-full overflow-hidden object-cover opacity-25 blur-[30vh] saturate-200"
	/>
</Default>
