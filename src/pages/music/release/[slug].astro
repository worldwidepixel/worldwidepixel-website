---
import Default from "../../../layouts/Default.astro";
import Button from "../../../components/Button.astro";
import { getCollection } from "astro:content";
import colour, { type GrabbedColour } from "colorthief";

export async function getStaticPaths() {
	const musicEntries = await getCollection("music");
	return musicEntries.map((entry: any) => ({
		params: { slug: entry.slug },
		props: { entry },
	}));
}

const { entry } = Astro.props as any;
const { Content } = await entry.render();

function formatDate(input: Date) {
	const format = new Intl.DateTimeFormat("en-GB", {
		dateStyle: "long",
	});
	return format.format(input);
}

export function getRgbCSS(colour: GrabbedColour) {
	return `rgb(${colour[0]}, ${colour[1]}, ${colour[2]})`;
}

export function getGradient(palette: GrabbedColour[], mainColour: GrabbedColour) {
	return `linear-gradient(90deg,${getRgbCSS(palette[1])} 0%, ${getRgbCSS(mainColour)} 50%, ${getRgbCSS(palette[2])} 100%)`;
}

const mainColour = await colour.getColor("./public" + entry.data.icon);
const gradient = await colour.getPalette("./public" + entry.data.icon);
---

<Default title={entry.data.title}>
	<div class="flex flex-col gap-8 py-16 text-sm">
		<img
			draggable="false"
			style={{ borderColor: `color-mix(in oklab, ${entry.data.colour}, transparent 80%)` }}
			class="mx-auto block size-56 rounded-md border-[1px] shadow-2xl md:hidden"
			src={entry.data.icon}
		/>
		<div class="grid grid-cols-1 grid-rows-[auto_auto] gap-x-6 gap-y-4 md:grid-cols-[12rem_auto]">
			<img
				draggable="false"
				style={{ borderColor: `color-mix(in oklab, ${entry.data.colour}, transparent 80%)` }}
				class="row-start-2 hidden size-48 rounded-md border-[1px] shadow-2xl md:block"
				src={entry.data.icon}
			/>
			<span class="italic text-brand-text-secondary md:col-start-2">{formatDate(entry.data.date)}</span>

			<div class="flex flex-col gap-4">
				<span class="text-6xl font-bold">{entry.data.title}</span>
				<span>
					{entry.data.summary}
				</span>
				<div class="flex flex-row flex-wrap items-center gap-2">
					{
						entry.data.links.map((link: { name: string; to: string }) => (
							<Button
								classList={`bg-opacity-50 bg-brand-background-secondary border-b-[1px] border-[${entry.data.colour}]`}
								style={{ borderColor: `color-mix(in oklab, ${entry.data.colour}, transparent 80%)` }}
								to={link.to}
								external={true}
								showIcon={true}>
								{link.name}
							</Button>
						))
					}
				</div>
			</div>
		</div>
		<span class="border-b"></span>
		<div class="md text-md">
			<Content />
		</div>
	</div>

	<div
		style={`background: ${getGradient(gradient, mainColour)};
`}
		class="bgimg pointer-events-none absolute left-0 top-0 z-[-2] h-[75%] w-full overflow-hidden object-cover opacity-25 blur-2xl saturate-200">
	</div>

	<!--<img
		src={entry.data.icon}
		class="bgimg pointer-events-none absolute left-0 top-0 z-[-2] h-[75%] w-full overflow-hidden object-cover opacity-25 blur-2xl saturate-200"
	/> -->
</Default>
